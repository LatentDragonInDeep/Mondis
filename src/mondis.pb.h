// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mondis.proto

#ifndef PROTOBUF_mondis_2eproto__INCLUDED
#define PROTOBUF_mondis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mondis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mondis_2eproto();
void protobuf_AssignDesc_mondis_2eproto();
void protobuf_ShutdownFile_mondis_2eproto();

class Message;

enum ExecResType {
  OK = 1,
  SYNTAX_ERROR = 2,
  INTERNAL_ERROR = 3,
  LOGIC_ERROR = 4
};
bool ExecResType_IsValid(int value);
const ExecResType ExecResType_MIN = OK;
const ExecResType ExecResType_MAX = LOGIC_ERROR;
const int ExecResType_ARRAYSIZE = ExecResType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecResType_descriptor();
inline const ::std::string& ExecResType_Name(ExecResType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecResType_descriptor(), value);
}
inline bool ExecResType_Parse(
    const ::std::string& name, ExecResType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecResType>(
    ExecResType_descriptor(), name, value);
}
enum MsgType {
  DATA = 1,
  COMMAND = 2,
  EXEC_RES = 3
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = DATA;
const MsgType MsgType_MAX = EXEC_RES;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum DataType {
  SYNC_DATA = 1,
  CONTROL_MSG = 2
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = SYNC_DATA;
const DataType DataType_MAX = CONTROL_MSG;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum CommandType {
  CLIENT_COMMAND = 1,
  MASTER_COMMAND = 2,
  PEER_COMMAND = 3,
  SLAVE_FORWARD = 4
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = CLIENT_COMMAND;
const CommandType CommandType_MAX = SLAVE_FORWARD;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mondis.MsgType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mondis::MsgType type() const;
  inline void set_type(::mondis::MsgType value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .mondis.ExecResType res_type = 3;
  inline bool has_res_type() const;
  inline void clear_res_type();
  static const int kResTypeFieldNumber = 3;
  inline ::mondis::ExecResType res_type() const;
  inline void set_res_type(::mondis::ExecResType value);

  // optional .mondis.DataType data_type = 4;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 4;
  inline ::mondis::DataType data_type() const;
  inline void set_data_type(::mondis::DataType value);

  // optional .mondis.CommandType command_type = 5;
  inline bool has_command_type() const;
  inline void clear_command_type();
  static const int kCommandTypeFieldNumber = 5;
  inline ::mondis::CommandType command_type() const;
  inline void set_command_type(::mondis::CommandType value);

  // optional string client_name = 6;
  inline bool has_client_name() const;
  inline void clear_client_name();
  static const int kClientNameFieldNumber = 6;
  inline const ::std::string& client_name() const;
  inline void set_client_name(const ::std::string& value);
  inline void set_client_name(const char* value);
  inline void set_client_name(const char* value, size_t size);
  inline ::std::string* mutable_client_name();
  inline ::std::string* release_client_name();
  inline void set_allocated_client_name(::std::string* client_name);

  // optional int32 slave_id = 7;
  inline bool has_slave_id() const;
  inline void clear_slave_id();
  static const int kSlaveIdFieldNumber = 7;
  inline ::google::protobuf::int32 slave_id() const;
  inline void set_slave_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mondis.Message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_res_type();
  inline void clear_has_res_type();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_command_type();
  inline void clear_has_command_type();
  inline void set_has_client_name();
  inline void clear_has_client_name();
  inline void set_has_slave_id();
  inline void clear_has_slave_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  int type_;
  int res_type_;
  int data_type_;
  int command_type_;
  ::std::string* client_name_;
  ::google::protobuf::int32 slave_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_mondis_2eproto();
  friend void protobuf_AssignDesc_mondis_2eproto();
  friend void protobuf_ShutdownFile_mondis_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required .mondis.MsgType type = 1;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mondis::MsgType Message::type() const {
  return static_cast< ::mondis::MsgType >(type_);
}
inline void Message::set_type(::mondis::MsgType value) {
  assert(::mondis::MsgType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string content = 2;
inline bool Message::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Message::content() const {
  return *content_;
}
inline void Message::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Message::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Message::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Message::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mondis.ExecResType res_type = 3;
inline bool Message::has_res_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_res_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_res_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_res_type() {
  res_type_ = 1;
  clear_has_res_type();
}
inline ::mondis::ExecResType Message::res_type() const {
  return static_cast< ::mondis::ExecResType >(res_type_);
}
inline void Message::set_res_type(::mondis::ExecResType value) {
  assert(::mondis::ExecResType_IsValid(value));
  set_has_res_type();
  res_type_ = value;
}

// optional .mondis.DataType data_type = 4;
inline bool Message::has_data_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_data_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
inline ::mondis::DataType Message::data_type() const {
  return static_cast< ::mondis::DataType >(data_type_);
}
inline void Message::set_data_type(::mondis::DataType value) {
  assert(::mondis::DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
}

// optional .mondis.CommandType command_type = 5;
inline bool Message::has_command_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_command_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_command_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_command_type() {
  command_type_ = 1;
  clear_has_command_type();
}
inline ::mondis::CommandType Message::command_type() const {
  return static_cast< ::mondis::CommandType >(command_type_);
}
inline void Message::set_command_type(::mondis::CommandType value) {
  assert(::mondis::CommandType_IsValid(value));
  set_has_command_type();
  command_type_ = value;
}

// optional string client_name = 6;
inline bool Message::has_client_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_client_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_client_name() {
  if (client_name_ != &::google::protobuf::internal::kEmptyString) {
    client_name_->clear();
  }
  clear_has_client_name();
}
inline const ::std::string& Message::client_name() const {
  return *client_name_;
}
inline void Message::set_client_name(const ::std::string& value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::kEmptyString) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
}
inline void Message::set_client_name(const char* value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::kEmptyString) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
}
inline void Message::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::kEmptyString) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_client_name() {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::kEmptyString) {
    client_name_ = new ::std::string;
  }
  return client_name_;
}
inline ::std::string* Message::release_client_name() {
  clear_has_client_name();
  if (client_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_name_;
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message::set_allocated_client_name(::std::string* client_name) {
  if (client_name_ != &::google::protobuf::internal::kEmptyString) {
    delete client_name_;
  }
  if (client_name) {
    set_has_client_name();
    client_name_ = client_name;
  } else {
    clear_has_client_name();
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 slave_id = 7;
inline bool Message::has_slave_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_slave_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_slave_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_slave_id() {
  slave_id_ = 0;
  clear_has_slave_id();
}
inline ::google::protobuf::int32 Message::slave_id() const {
  return slave_id_;
}
inline void Message::set_slave_id(::google::protobuf::int32 value) {
  set_has_slave_id();
  slave_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mondis

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mondis::ExecResType>() {
  return ::mondis::ExecResType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mondis::MsgType>() {
  return ::mondis::MsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mondis::DataType>() {
  return ::mondis::DataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mondis::CommandType>() {
  return ::mondis::CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mondis_2eproto__INCLUDED
