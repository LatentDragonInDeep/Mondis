// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mondis.proto

#ifndef PROTOBUF_mondis_2eproto__INCLUDED
#define PROTOBUF_mondis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mondis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mondis_2eproto();
void protobuf_AssignDesc_mondis_2eproto();
void protobuf_ShutdownFile_mondis_2eproto();

class Message;

enum Message_MsgType {
  Message_MsgType_DATA = 1,
  Message_MsgType_COMMAND = 2
};
bool Message_MsgType_IsValid(int value);
const Message_MsgType Message_MsgType_MsgType_MIN = Message_MsgType_DATA;
const Message_MsgType Message_MsgType_MsgType_MAX = Message_MsgType_COMMAND;
const int Message_MsgType_MsgType_ARRAYSIZE = Message_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_MsgType_descriptor();
inline const ::std::string& Message_MsgType_Name(Message_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_MsgType_descriptor(), value);
}
inline bool Message_MsgType_Parse(
    const ::std::string& name, Message_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_MsgType>(
    Message_MsgType_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_MsgType MsgType;
  static const MsgType DATA = Message_MsgType_DATA;
  static const MsgType COMMAND = Message_MsgType_COMMAND;
  static inline bool MsgType_IsValid(int value) {
    return Message_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    Message_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    Message_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    Message_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return Message_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return Message_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return Message_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .mondis.Message.MsgType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mondis::Message_MsgType type() const;
  inline void set_type(::mondis::Message_MsgType value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:mondis.Message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mondis_2eproto();
  friend void protobuf_AssignDesc_mondis_2eproto();
  friend void protobuf_ShutdownFile_mondis_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required .mondis.Message.MsgType type = 1;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mondis::Message_MsgType Message::type() const {
  return static_cast< ::mondis::Message_MsgType >(type_);
}
inline void Message::set_type(::mondis::Message_MsgType value) {
  assert(::mondis::Message_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string content = 2;
inline bool Message::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Message::content() const {
  return *content_;
}
inline void Message::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Message::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Message::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Message::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mondis

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mondis::Message_MsgType>() {
  return ::mondis::Message_MsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mondis_2eproto__INCLUDED
